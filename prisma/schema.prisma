// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  googleAccounts    GoogleAccount[]
  hubspotAccount    HubSpotAccount?
  hubSpotOAuthStates HubSpotOAuthState[]
  schedulingWindows SchedulingWindow[]
  schedulingLinks   SchedulingLink[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GoogleAccount {
  id           String   @id @default(cuid())
  userId       String
  email        String
  googleId     String
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  scope        String
  tokenType    String
  expiryDate   DateTime
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, email])
  @@index([userId])
  @@index([email])
}

model HubSpotAccount {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  hubId         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model HubSpotOAuthState {
  id        String   @id @default(cuid())
  userId    String
  state     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SchedulingWindow {
  id        String   @id @default(cuid())
  userId    String
  startTime String   // Format: "HH:mm"
  endTime   String   // Format: "HH:mm"
  weekdays  String[] // Array of weekdays: ["MONDAY", "TUESDAY", etc.]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SchedulingLink {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  slug            String   @unique
  usageLimit      Int?
  expiresAt       DateTime?
  meetingLength   Int      // in minutes
  maxAdvanceDays  Int      @default(30)
  customQuestions Json     // Array of questions
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}
